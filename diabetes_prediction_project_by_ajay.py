# -*- coding: utf-8 -*-
"""Diabetes prediction project by Ajay.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eAI4vJUBJEKMd_PqBv8cQkexLwBORVHA
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
importimport numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

df = pd.read_csv("/bin/diabetes prediction/internpe/diabetes - diabetes.csv")
df.head(15)

df.info()

df.shape

df.describe()

df.isnull().sum()

p=sns.pairplot(df)

sns.heatmap(df.corr(),cmap = 'Greens',annot=True)

from sklearn.model_selection import train_test_split

x = df.drop(['Outcome'], axis=1)
y=df['Outcome']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)
x_train.shape

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)
x_train

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_curve, roc_auc_score

# Split the data into features and labels
X = df.iloc[:, :-1]  # Features (all columns except the last one)
y = df.iloc[:, -1]   # Labels (last column, e.g., 'Outcome')

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features (mean=0, std=1) for better performance
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Hyperparameter tuning with GridSearchCV
param_grid = {
    'n_estimators': [50, 100, 200],
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4],
    'bootstrap': [True, False]
}

rf_model = RandomForestClassifier(random_state=42)

grid_search = GridSearchCV(estimator=rf_model, param_grid=param_grid,
                           cv=5, n_jobs=-1, verbose=2)

grid_search.fit(X_train, y_train)
best_rf_model = grid_search.best_estimator_

# Perform cross-validation
cv_scores = cross_val_score(best_rf_model, X_train, y_train, cv=5)
print(f"Cross-Validation Accuracy: {np.mean(cv_scores) * 100:.2f}%")

# Predictions on the test data
y_pred = best_rf_model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)

print(f"Test Accuracy: {accuracy * 100:.2f}%")
print("Confusion Matrix:\n", conf_matrix)
print("Classification Report:\n", class_report)

# 1. Confusion Matrix Heatmap
plt.figure(figsize=(6, 4))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.title('Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()

# 2. ROC Curve
y_proba = best_rf_model.predict_proba(X_test)[:, 1]  # Get probability estimates for the positive class
fpr, tpr, thresholds = roc_curve(y_test, y_proba)
roc_auc = roc_auc_score(y_test, y_proba)

plt.figure(figsize=(6, 4))
plt.plot(fpr, tpr, label=f'ROC Curve (AUC = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], linestyle='--', color='gray')  # Plot a diagonal line for reference
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend()
plt.show()

# 3. Feature Importance Plot
importances = best_rf_model.feature_importances_
feature_names = df.columns[:-1]
feature_importance_df = pd.DataFrame({'Feature': feature_names, 'Importance': importances})
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

plt.figure(figsize=(10, 6))
sns.barplot(x='Importance', y='Feature', data=feature_importance_df)
plt.title('Feature Importance')
plt.show()

# Calculate the accuracy score on the training data
training_data_accuracy = best_rf_model.score(X_train, y_train)

print('Accuracy score of the training data : ', training_data_accuracy)

accuracy=accuracy_score(y_test,y_pred) # Changed Y_test to y_test
print(str(accuracy*100)+" % accuracy")

from sklearn.metrics import average_precision_score # Import the average_precision_score function

average_precision = average_precision_score(y_test, y_pred) # Changed Y_test to y_test to match the variable name

print('Average precision-recall score: {0:0.2f}'.format(
      average_precision))

from sklearn.metrics import precision_recall_curve # Import the precision_recall_curve function

precision, recall, _ = precision_recall_curve(y_test, y_pred) # Changed Y_test to y_test to match the variable name
plt.step(recall, precision, color='b', alpha=0.2,where = 'post')

plt.fill_between(recall, precision, step='post', alpha=0.2,color='b')
plt.xlabel('Recall')
plt.ylabel('Precision')
plt.ylim([0.0, 1.05])
plt.xlim([0.0, 1.0])
plt.title('2-class Precision-Recall curve: AP={0:0.2f}'.format(
          average_precision))
plt.show()

input_data = (4,110,92,0,0,37.6,0.191,30)

# changing the input data as numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshaping the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# standardize the input data
std_data = scaler.transform(input_data_reshaped) # Use scaler instead of Scaler
print(std_data)

# Use best_rf_model instead of classifier
prediction = best_rf_model.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print("The person is not diabetic. ")
else:
  print("The person is diabetic. ")